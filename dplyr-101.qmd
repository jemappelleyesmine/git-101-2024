---
title: "Dplyr 101"
author: "Fabrice Rossi"
format: 
  html:
    code-fold: true
  pdf: default
---

```{r}
#| message: false
here::i_am("git-101-2024.Rproj")
library(here)
library(vroom)
library(ggplot2)
theme_set(theme_bw())
```

## Data import

```{r}
#| message: false
white_wine <- vroom(here("data", "winequality-white.csv"))
```
Vroom makes it so it should work on any operating system, despite the fact that the slashes are not the same depending on the OS.


|                        |                      |
|------------------------|----------------------|
| Number of observations | `r NROW(white_wine)` |
| Number of variables    | `r NCOL(white_wine)` |

```{r}
ggplot(white_wine, aes(x = quality)) +
  geom_bar()
```

## Data transformation
```{r}
#| message: false
library(dplyr)
```

### Column extraction 
```{r}
class(white_wine)
## class + column extraction
class(white_wine$quality)
## column extraction and then class
white_wine$quality |> class()
white_wine[["quality"]] |> class()
white_wine$`fixed acidity` |> class()
white_wine[["fixed acidity"]] |> class()
## dplyr style
white_wine |>
  pull(quality) |>
  class()
class(pull(white_wine, quality))
```

With `dplyr`, `pull()` is the column extraction function, somewhat similar to the
dollar `$` operator and to the double bracket `[[]]`. 

We accessed the columns of wine_quality with the $ or the double brackets. This is standard procedure because white_wine acts like a list.

### Column recoding
This ggplot call gives a warning because `quality` is numeric which is not
supported for bar filling in `geom_bar()`.

```{r}
#| eval: false
#| code-fold: false
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```


```{r}
#| eval: false
white_wine$quality <- factor(white_wine$quality,
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
white_wine$quality <- white_wine$quality |> factor(
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
```

```{r}
white_wine <- white_wine |>
  mutate(quality = factor(quality, ordered = TRUE, levels = 3:9))
```

```{r}
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```

### Computing new columns
This is again a task for `mutate()`.

```{r}
white_wine <- white_wine |>
  mutate(`captured sulfur dioxide` = `total sulfur dioxide` - `free sulfur dioxide`,
         `free sd %` = round(`free sulfur dioxide` / `total sulfur dioxide` * 100, 2))
```

## Sub-setting
### Selecting columns
Column sub-setting is done with the `select()` function.

```{r}
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH)
```

Side note: we can display nicely data frames with the `knitr::kable()` function
but the original data frame is too big, so we select the first 10 rows with
`slice()`. 

```{r}
#| message: false
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH) |>
  slice(1:10) |>
  knitr::kable()
```
Positional selection based on the indices of the columns.

```{r}
#| eval: false
white_wine |> 
  select(1:3)
```

Columns can also be selected based on conditions on their names or on their
nature. 

```{r}
#| eval: false
white_wine |> 
  select(contains("acid") | pH)
```

Selection based on the content.

```{r}
#| eval: false
white_wine |> 
  select(where(is.factor))
```

```{r}
#| eval: false
white_wine |> 
  select(where(\(x) is.numeric(x) & (max(x) < 5)))
```
Here, we use advanced column selection. We use select on the properties of the content of the columns. That is why we use the where operator in addition to select (so that it accesses the columns). Inside select, we put a function. This is an anonymous functions that is defined in order to do what we want. We say: for each of the columns (the data frame is a list with several columns), you keep the column for TRUE and remove the column for FALSE. If the content is numeric AND the maximum is smaller than 5, the column will return TRUE and will be kept.

### Selecting rows

Simple selection is based on indices with `slice()`. 

```{r}
white_wine |> 
  slice(1:5, 150:155) |>
  select(alcohol, quality) |>
  knitr::kable()
```

Condition based selection uses `filter()`.

```{r}
white_wine |> 
  filter(alcohol > 14) |>
  select(alcohol, quality, `citric acid`, `residual sugar`) |>
  knitr::kable()
```
each value of alcohol will be compared to 14, and we will keep the TRUE values only.

### Simple application
```{r}
ggplot(white_wine, aes(x=alcohol)) +
  geom_density(bw="sj") +
  geom_rug(alpha = 0.1)
```
```{r}
white_wine |> 
  filter(alcohol >= 13, `citric acid` < 1) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```

```{r}
white_wine |> 
  filter(alcohol <= 9) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```
```{r}
white_wine |>
  mutate(`alcohol category` = case_when(alcohol <= 9 ~ "low",
                                        alcohol >= 13 ~ "high",
                                        .default = "medium")) |>
  filter(`alcohol category` != "medium") |>
  filter(`citric acid` <= 1) |> 
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c() +
  facet_wrap(vars(`alcohol category`))
```

## Aggregation functions
Aka summary functions: turns a possibly long vector into a single value (still a vector!).

An aggregation function takes as an input a vector and produces a vector with a single value in it.

- Standard statistics: `max()`, `min()`, `median')`, etc.
- Logical operations: `any()` and `all()```
- Counts and ranks: `n()`

### Simple summary use
Based on the `summarise()` function or inside a `mutate()`cell.

```{r}
white_wine |> 
  summarise(
    median(alcohol),
    sd(alcohol)
    )
```
We want to summarize the white wine table by displaying the median of the alcohol content and the standard deviation of the alcohol content. The result is a one row table with two columns.

As a reminder, `|>` is the same as `%>%`. But the latter is implemented by a function in R, and the first one is directly on R (so it's a bit faster).

You can directly specify a name for each column like this:
```{r}
white_wine |> 
  summarise(
    med_alcohol = median(alcohol),
    standard_deviation_alcohol = sd(alcohol)
    )
```

What if you don't use the summarise function?
```{r}
white_wine |>
  select(alcohol) |>
  mutate(m_a = median(alcohol))
```
Because there is no summary, this is considered as a standard operation and it will just copy the median 5000 times.

This can still have some interesting applications, such as:
```{r}
white_wine |>
  select(alcohol) |>
  mutate(alcohol_minus_median = alcohol - median(alcohol),
         .keep = "none")
```

If we want to standardized alcohol in a robust way (with the interquartile range) or in a normal way (with the standard deviation), we can:
```{r}
white_wine |>
  select(alcohol) |>
  mutate(normalized_alcohol = (alcohol - mean(alcohol))/sd(alcohol),
    normalized_alcohol_robust = (alcohol - median(alcohol))/IQR(alcohol),
         .keep = "none")
```
`.keep = none` is to remove the other values.

If we want to understand the difference in result between the robust standardization and normal standardization, we can:
```{r}
white_wine |>
  summarise(mean(alcohol),
            sd(alcohol),
            median(alcohol),
            IQR(alcohol))
```
The distribution is not gaussian (we can see that in the graph above) so it will not be summarized properly by the standard deviation, which is why it gives a different result from the normalization with IQR.

### More complex summary functions
Essentially `quantile()`.

```{r}
quantile(white_wine$`residual sugar`)
```
You get a vector which has names (such as 0%). You get a second vector that contains the minimum value, the maximum value, the median and the two other quartiles.

You can change the percentage values using the `probs` parameter:
```{r}
quantile(white_wine$`residual sugar`, probs = seq(0, 1, 0.1))
```
This shows the extreme skewedness of the distribution towards the right.

```{r}
mean(white_wine$`residual sugar`)
```
So the median is 5.2 while the mean is 6.4.

There is a problem of extension compatibility with `quantile()` in the context of `summarise()` and `mutate()`:
```{r}
white_wine |>
  summarise(quantile(`residual sugar`))
```
It works but R is complaining because we did not use `reframe()` and used `summarise()` instead.

So we use `reframe()`:
```{r}
white_wine |>
  reframe(quantile(`residual sugar`),
          mean(`residual sugar`))
```
Now it works.

### Group by
```{r}
white_wine |>
  summarise(median(`residual sugar`),
            n(),
            .by = quality) |>
arrange(quality)
```
There are seven values for quality (3 up to 9). The `summary()` function identified the values for quality. Then, it split the dataset into independent subsets for each quality value. Then, on each of the subsets, it applied the `median()` function by calculating the median. Then, it compiled all the results into a table. The `arrange()` function will arrange the quality from lower to higher. The `nl()` function is a summary function will show the size/number of observations of each group.

We divide alcohol content into high and low. For each subset, we calculate the median of residual sugar and compute the number of observations:
```{r}
white_wine |>
  mutate(high_alcohol = alcohol >= 13) |>
  summarise(median(`residual sugar`),
            n(),
            .by = high_alcohol)
```
This is an example of the practicality of such tools for hypotheses testing.

We can choose our own definition for classification but in a more complex way through `cut()` and `breaks`:
```{r}
white_wine |>
  mutate(alcohol_class = cut(alcohol, breaks=c(7, 9, 10, 12, 13, 15)) ) |>
  summarise(median(`residual sugar`),
            n(),
            .by = alcohol_class)
```